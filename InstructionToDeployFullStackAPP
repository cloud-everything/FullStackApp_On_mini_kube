#======start minikube
minikube stop
minikube start

#============================= deploy mysql kubernetes cluster=======================
kubectl create namespace mysql ############create a mysql namespace
kubectl config set-context --current --namespace=mysql
kubectl apply -f mysql-service.yaml ####################create a headless service
kubectl apply -f mysql-statefulset.yaml ################create a statefulset for mysql
kubectl get pods ###############check status of pods
kubectl get services ################check status of service and load balancer
kubectl get pvc #############check status of pvc




#=============================== building docker image of springboot ============================
#build the jar and run it locally
java -jar dining_services-0.0.1-SNAPSHOT.jar --spring.datasource.url=jdbc:mysql://localhost:3306/dining_services --spring.datasource.username=root   --spring.datasource.password=Sql@10071999 ######################run jar locally to see if everythin is working
docker build -t dining_services . ##################build the container
docker run -p 8080:8080 dining_services   java -jar dining_services.jar  --spring.datasource.url=jdbc:mysql://host.docker.internal/dining_services   --spring.datasource.username=root   --spring.datasource.password=Sql@10071999 ######################33#run dockerlocally
minikube image load dining_services


#========================deploy springboot app in kubernetes cluster===================
kubectl create namespace springboot
kubectl config set-context --current --namespace=springboot
kubectl apply -f springboot-deployment.yaml
minikube tunnel #create a tunnel for load balancer service in seperate terminal
kubectl apply -f springboot-service.yaml 
kubectl get pods
kubectl get svc

#=========================build the angular image for docker========================
kubectl create namespace angular
kubectl config set-context --current --namespace=angular
docker build -t angular-dining-services . 
minikube image load angular-dining-services
kubectl apply -f angular-deployment.yaml
kubectl apply -f angular-service.yaml 


#========================check status of all cluster==========================
kubectl get pods --all-namespaces -o wide
kubectl get svc --all-namespaces -o wide
